AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation for codefolio project showcasing.

Parameters:
  ApiName:
    Type: String
    Description: The name of the API

Resources:
  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: tycrowe-codefolio-projects
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  ProjectsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda.lambda_handler
      Role: !GetAtt ProjectsFunctionRole.Arn
      Code:
        S3Bucket: '{{resolve:ssm:/codefolio/bucket-name:1}}'
        S3Key: codefolio.zip
      Runtime: python3.8
      Environment:
        Variables:
          TABLE_NAME: !Ref ProjectsTable

  ProjectsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: !GetAtt ProjectsTable.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: '{{resolve:ssm:/codefolio/bucket-arn:1}}'

  ProjectsAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: tycrowe-codefolio-projects-api

  ProjectsFunctionExecutionByAPIGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ProjectsFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ProjectsAPI}/*"
    DependsOn:
         - ProjectsAPI

  ProjectsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ProjectsAPI.RootResourceId
      PathPart: projects
      RestApiId: !Ref ProjectsAPI

  ProjectsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ProjectsResource
      RestApiId: !Ref ProjectsAPI
      ApiKeyRequired: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectsFunction.Arn}/invocations

  ProjectMethodCors:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ProjectsResource
      RestApiId: !Ref ProjectsAPI
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ProjectDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ProjectsAPI
      StageName: prod
    DependsOn:
         - ProjectsMethod

  ProjectAPIKeyUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref ProjectsAPI
          Stage: prod
      Description: "API Key for Codefolio Projects API"
      Throttle:
        BurstLimit: 200
        RateLimit: 100
    DependsOn:
         - ProjectDeployment

  ProjectsAPIKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: tycrowe-codefolio-projects-api-key
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ProjectsAPI
          StageName: prod
    DependsOn:
         - ProjectDeployment

  ProjectsAPIKeyUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ProjectsAPIKey
      KeyType: API_KEY
      UsagePlanId: !Ref ProjectAPIKeyUsagePlan

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: 'CloudFront distribution for API Gateway'
        DefaultCacheBehavior:
          TargetOriginId: 'ApiGatewayOrigin'
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: true
            Headers:
              - 'Origin'
              - 'Authorization'
              - 'Content-Type'
              - 'X-Api-Key'
          LambdaFunctionAssociations: []
        Origins:
          - DomainName: !Sub "${ProjectsAPI}.execute-api.${AWS::Region}.amazonaws.com"
            Id: 'ApiGatewayOrigin'
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
        
Outputs:
  ProjectsAPIEndpoint:
    Description: "API Gateway endpoint URL for prod stage"
    Value: !Sub "https://${ProjectsAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/projects/"
